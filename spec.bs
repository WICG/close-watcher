<pre class="metadata">
Title: Close Watcher API
Shortname: close-watcher
Repository: domenic/close-watcher
Inline Github Issues: true
Status: DREAM
URL: https://domenic.github.io/close-watcher/
Boilerplate: omit conformance, omit feedback-header
Metadata Include: This version off
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me, https://domenic.me/
Abstract: The close watcher API provides a platform-agnostic way of handling close signals.
!Participate: <a href="https://github.com/domenic/close-watcher">GitHub domenic/close-watcher</a> (<a href="https://github.com/domenic/close-watcher/issues/new">new issue</a>, <a href="https://github.com/domenic/close-watcher/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/WICG/app-history/commits/master/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
Markup Shorthands: markdown yes
Assume Explicit For: yes
</pre>
<pre class="anchors">
spec: ui-events; urlPrefix: https://w3c.github.io/uievents/#
  text: keydown; type: event; url: event-type-keydown
</pre>

<style>
.selected-text-file-an-issue {
  position: fixed;
  bottom: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.8);
  font-size: smaller;
  padding: 4px 10px;
  z-index: 4;
}

dfn var {
  font-style: italic;
}

table {
  margin: 1em 0;
}

/* WHATWG-style <hr>s, instead of WICG-style. Specific selector is necessary to override WICG styles. */
:not(.head) > :not(.head) + hr {
  display: block;
  background: none;
  border: none;
  padding: 0;
  margin: 3em 0;
  height: auto;
}
:not(.head) > :not(.head) + hr::before {
  content: none;
}

/* domintro from https://resources.whatwg.org/standard.css */
.domintro {
  position: relative;
  color: green;
  background: #DDFFDD;
  margin: 2.5em 0 2em 0;
  padding: 1.5em 1em 0.5em 2em;
}

.domintro dt, .domintro dt * {
  color: black;
  font-size: inherit;
}
.domintro dd {
  margin: 0.5em 0 1em 2em; padding: 0;
}
.domintro dd p {
  margin: 0.5em 0;
}
.domintro::before {
  content: 'For web developers (non-normative)';
  background: green;
  color: white;
  padding: 0.15em 0.25em;
  font-style: normal;
  position: absolute;
  top: -0.8em;
  left: -0.8em;
}
</style>

<script src="https://resources.whatwg.org/file-issue.js" async></script>

<h2 id="close-signals">Close signals</h2>

(This section could be introduced as a new subsection of [[!HTML]]'s <a href="https://html.spec.whatwg.org/#editing">User interaction</a> section.)

In an [=implementation-defined=] (and likely device-specific) manner, a user can send a <dfn export>close signal</dfn> to the user agent. This indicates that the user wishes to close something which is currently being shown on the screen, such as a popup, menu, dialog, picker, or display mode.

<div class="example" id="example-close-signals">
  Some example close signals are:

  * The <kbd>Esc</kbd> key on desktop platforms
  * The back button on Android
  * The two-finger scrub "z" gesture on iOS when using VoiceOver
  * The square button on a DualShock (PlayStation) controller
</div>

Whenever the user agent receives a potential close signal targeted at a {{Document}} |document|, it must perform the following <dfn export>close signal steps</dfn>:

1. If |document|'s [=fullscreen element=] is non-null, then <a spec="FULLSCREEN">fully exit fullscreen</a> and return.
   <p class="note">This does <em>not</em> fire any relevant event, such as {{keydown}}; it only fires fullscreenchange. <!-- TODO {{fullscreenchange}} once https://github.com/whatwg/fullscreen/pull/195 lands. -->
1. Fire any relevant event, per <cite>UI Events</cite> or other relevant specifications. [[!UI-EVENTS]]
1. If such an event was fired, and its [=Event/canceled flag=] is set, then return.
1. If such an event was fired, then perform the following steps within the same task as that event was fired in, immediately after firing the event. Otherwise, [=queue a global task=] on the [=user interaction task source=] given |document|'s [=relevant global object=] to perform the following steps.
1. If |document| is not [=Document/fully active=], then return.
1. Let |closedSomething| be the result of [=signaling close=] on |document|.
1. If |closedSomething| was true, then return.
1. Otherwise, there was nothing watching for a close signal. The user agent may instead interpret this interaction as some other action, instead of as a close signal.

<p class="example" id="example-desktop-esc-sequence">On a desktop platform where <kbd>Esc</kbd> is the close signal, the user agent will first fire an appropriately-initialized {{keydown}} event. If the web developer intercepts this event and calls {{Event/preventDefault()}}, then nothing further happens. But if the event is fired without being canceled, then the user agent proceeds to [=signal close=].

<p class="example" id="example-android-back-sequence">On Android where the back button is a potential close signal, no event is involved, so when the user agent determines that the back button represents a close signal, it [=queues a task=] to [=signal close=]. If there is a [=close watcher/is still valid|still-valid=] [=close watcher=], then that will get triggered; otherwise, the user agent will interpret the back button press as a request to <a spec="HTML">traverse the history by a delta</a> of &minus;1.

<h3 id="close-watchers">Close watcher infrastructure</h3>

Each {{Document}} has a <dfn export>close watcher stack</dfn>, a [=stack=] of [=close watchers=], initially empty.

A <dfn export>close watcher</dfn> is a [=struct=] with the following [=struct/items=]:

* A <dfn export for="close watcher">close action</dfn>, a list of steps. These steps can never throw an exception.
* An <dfn export for="close watcher">is still valid</dfn> list of steps. These steps can never throw an exception, and return either true or false.
* A <dfn export for="close watcher">blocks further developer-controlled close watchers</dfn> boolean.

<p class="note">The [=close watcher/is still valid=] steps are a spec convenience that allows us to [=stack/push=] [=close watchers=] onto the [=close watcher stack|stack=] without having to add hooks to appropriately clean them up every time they become invalidated. Doing so can be tricky as in addition to explicit teardown steps, there are often implicit ones, e.g. by removing a relevant element from the document.

<div algorithm>
  To <dfn>signal close</dfn> given a {{Document}} |document|:

  1. While |document|'s [=close watcher stack=] is not empty:
    1. Let |closeWatcher| be the result of [=stack/popping=] from |document|'s [=close watcher stack=].
    1. If |closeWatcher|'s [=close watcher/is still valid=] steps return true, then:
      1. Perform |closeWatcher|'s [=close watcher/close action=].
      1. Return true.
  1. Return false.
</div>

<div algorithm>
  We <dfn lt="can create a developer-controlled close watcher|cannot create a developer-controlled close watcher">can create a developer-controlled close watcher</dfn> for a {{Document}} |document| if the following steps return true:

  1. If |document| is not [=Document/fully active=], then return false.
  1. If |document|'s [=relevant global object=] has [=transient activation=], then return true.
  1. [=list/For each=] |closeWatcher| in |document|'s [=close watcher stack=]:
    1. If |closeWatcher|'s [=close watcher/is still valid=] steps return true, and |closeWatcher|'s [=close watcher/blocks further developer-controlled close watchers=] is true, then return false.
  1. Return true.
</div>

<h3 id="close-watcher-api">Close watcher API</h3>

<xmp class="idl">
[Exposed=Window]
interface CloseWatcher : EventTarget {
  constructor();

  undefined destroy();
  undefined signalClose();

  attribute EventHandler onclose;
};
</xmp>

<dl class="domintro non-normative">
  <dt><code><var ignore>watcher</var> = new {{CloseWatcher/constructor()|CloseWatcher}}()</code></dt>
  <dd>
    <p>Attempts to create a new {{CloseWatcher}} instance.

    <p>If a {{CloseWatcher}} is already active, then this will instead throw a "{{NotAllowedError}}" {{DOMException}}.
  </dd>

  <dt><code><var ignore>watcher</var>.{{CloseWatcher/destroy()|destroy}}()</code></dt>
  <dd>
    <p>Deactivates this {{CloseWatcher}} instance, so that it will no longer receive {{CloseWatcher/close}} events and so that new {{CloseWatcher}} instances can be constructed.

    <p>This is intended to be called if the relevant UI element is closed in some other way than via a [=close signal=], e.g. by pressing an explicit "Close" button.
  </dd>

  <dt><code><var ignore>watcher</var>.{{CloseWatcher/signalClose()|signalClose}}()</code></dt>
  <dd>
    <p>Acts as if a [=close signal=] was sent targeting this {{CloseWatcher}} instance, by firing a {{CloseWatcher/close}} event and deactivating the close watcher as if {{CloseWatcher/destroy()}} was called.

    <p>This is a helper utility that can be used to consolidate closing logic into the {{CloseWatcher/close}} event handler, by having all non-[=close signal=] closing affordances call {{CloseWatcher/signalClose()}}.
  </dd>
</dl>

Each {{CloseWatcher}} has an <dfn for="CloseWatcher">is active</dfn>, which is a boolean.

<div algorithm>
  The <dfn constructor for="CloseWatcher" lt="CloseWatcher()">new CloseWatcher()</dfn> constructor steps are:

  1. If we [=cannot create a developer-controlled close watcher=] for [=this=]'s [=relevant global object=]'s [=associated document=], then throw a "{{NotAllowedError}}" {{DOMException}}.
  1. Set [=this=]'s [=CloseWatcher/is active=] to true.
  1. [=stack/Push=] a new [=close watcher=] on [=this=]'s [=relevant global object=]'s [=associated document=]'s [=close watcher stack=], with its [=struct/items=] set as follows:
    * [=close watcher/close action=] being to [=CloseWatcher/signal close=] on [=this=]
    * [=close watcher/is still valid=] steps being to return [=this=]'s [=CloseWatcher/is active=]
    * [=close watcher/blocks further developer-controlled close watchers=] being true
</div>

<div algorithm>
  The <dfn method for="CloseWatcher">destroy()</dfn> method steps are to set [=this=]'s [=CloseWatcher/is active=] to false.
</div>

<div algorithm>
  The <dfn method for="CloseWatcher">signalClose()</dfn> method steps are to [=CloseWatcher/signal close=] on [=this=].
</div>

Objects implementing the {{CloseWatcher}} interface must support the <dfn attribute for="CloseWatcher">onclose</dfn> [=event handler IDL attribute=], whose [=event handler event type=] is <dfn event for="CloseWatcher">close</dfn>.

<div algorithm>
  To <dfn for="CloseWatcher">signal close</dfn> on a {{CloseWatcher}} |closeWatcher|:

  1. If |closeWatcher|'s [=CloseWatcher/is active=] is false, then return.
  1. [=Fire an event=] named {{CloseWatcher/close}} at |closeWatcher|.
  1. Set |closeWatcher|'s [=CloseWatcher/is active=] to false.
</div>

<h2 id="patches">Updates to other specifications</h2>

<h3 id="patch-fullscreen">Fullscreen</h3>

Replace the sentence about "If the end user instructs..." in [[FULLSCREEN#ui]] with the following:

If the user initiates a [=close signal=], this will trigger the <a spec="FULLSCREEN">fully exit fullscreen</a> algorithm as part of the [=close signal steps=]. This takes precedence over any [=close watchers=].

<h3 id="patch-dialog">The <{dialog}> element</h3>

Update <cite>HTML</cite>'s <a href="https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element">The `dialog` element</a> section as follows: [[!HTML]]

<div algorithm="showModal patch">
  In the {{HTMLDialogElement/showModal()}} steps, after adding |subject| to the [=top layer=], append the following step:

  1. If we [=can create a developer-controlled close watcher=] given |subject|'s [=Node/node document=], then [=stack/push=] a new [=close watcher=] on |subject|'s [=Node/node document=]'s [=close watcher stack=], with its [=struct/items=] set as follows:
    * [=close watcher/close action=] being to [=cancel the dialog=] |subject|
    * [=close watcher/is still valid=] steps being to return true if |subject|'s [=Node/node document=] is <a spec="HTML" lt="blocked by a modal dialog">blocked by the modal dialog</a> |subject|, and return false otherwise
    * [=close watcher/blocks further developer-controlled close watchers=] being true
</div>

Replace the "Canceling dialogs" section entirely with the following definition. (The previous prose about providing a user interface to cancel such dialogs, and the task-queuing, is now handled by the infrastructure in [[#close-signals]].)

<div algorithm>
  To <dfn>cancel the dialog</dfn> |dialog|:

  1. Let |close| be the result of [=firing an event=] named {{HTMLElement/cancel}} at |dialog|, with the {{Event/cancelable}} attribute initialized to true.

  1. If |close| is true and |dialog| has an <{dialog/open}> content attribute, then <a spec="HTML" lt="close">close the dialog</a> |dialog| with no return value.
</div>
